#!/usr/bin/env node
const log = require('./logger');
const execute = require('./shell');

log.info('Drone downstream registry plugin');

try {
  log.info('Reading and verifying parameters');
  const params = require('./params');

  if (!params.registry.downstream) {
    log.info(`Downstream build flag not set`);
    log.info(`Assume normal build. Exiting.`);
    return;
  }

  log.info('Building registry file storage');
  const storage = require('./fileStorage')(params.plugin.registryPath);

  log.info('Building registry');
  const registry = require('./registry')(storage);

  // Dumps all exposed env vars
  // Object.keys(process.env).forEach((name) => log.info(`${name}=${process.env[name]}`));

  switch (params.plugin.action) {
    case 'package-build':
      log.info('Executing [package-build]');
      registry.createPackageEntry(
        params.registry.package,
        params.registry.version,
        params.plugin.repositories,
        params.plugin.onSuccess,
        params.plugin.onFailure
      );
      log.info(`Successfully registered package ${params.registry.package} version ${params.registry.version}`);
      log.info(`Awaiting downstream builds:`);
      params.plugin.repositories.forEach((repo) => log.info(`\t${repo}`));

      break;

    case 'downstream-build':
      log.info('Executing [downstream-build]');
      log.info(`Package ${params.registry.package} version ${params.registry.version}`);
      log.info(`Downstream repo ${params.drone.repo} build ${params.drone.build.number} status ${params.drone.build.status}`);

      registry.registerDownstreamBuild(
        params.registry.package,
        params.registry.version,
        params.drone.repo,
        params.drone.build.status,
        params.drone.build.number
      );

      const status = registry.currentPackageStatus(
        params.registry.package,
        params.registry.version,
        log
      );

      log.info(`Current package cumulative status: ${status.toUpperCase()}`);

      if (status !== 'waiting') {
        log.info(`Executing handler (if any) for status`);
        execute(registry.getHandler(
          params.registry.package,
          params.registry.version,
          status
        ));
      }

      break;
  }
} catch (e) {
  log.error(`Error: ${e.stack}`);
  process.exit(1);
}


